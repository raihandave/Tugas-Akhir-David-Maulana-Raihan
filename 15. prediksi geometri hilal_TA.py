# -*- coding: utf-8 -*-
"""geomteri hilal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11b-5vmXVnfT_gEs1uqYVNdh1qqPYnen2
"""

pip install skyfield

from skyfield import api
from skyfield import almanac
from skyfield.nutationlib import iau2000b
from skyfield.units import Angle
from datetime import timedelta
import astropy.units as u
from datetime import datetime
from pytz import timezone

timescale = api.load.timescale()
ephemeris = api.load('de431t.bsp')

# Pusat OAIL
longitude = 105 + 37/60
latitude = -(5 + 49/60 + 50/3600)

iteraTopo = api.Topos(longitude=longitude, latitude=latitude)

t1 = timescale.utc(2023, 3, 21, 0)
t2 = timescale.utc(2023, 3, 22, 0)

sunriset, sunBol = almanac.find_discrete(t1, t2, almanac.sunrise_sunset(ephemeris, iteraTopo))

def moonrise_moonset(ephemeris, topos):
    moon = ephemeris['moon']
    topos_at = (ephemeris['earth'] + topos).at
    def is_moon_up_at(t):
        t._nutation_angles = iau2000b(t.tt)
        return topos_at(t).observe(moon).apparent().altaz()[0].degrees > -50/60
    is_moon_up_at.rough_period = 0.5
    return is_moon_up_at

moonriset, moonBol = almanac.find_discrete(t1, t2, moonrise_moonset(ephemeris, iteraTopo))

sunriset[~sunBol]

moonriset[~moonBol]

sunriset[~sunBol].utc_iso()

moonriset[~moonBol].utc_iso()

earth = ephemeris['earth']
sun = ephemeris['sun']
moon = ephemeris['moon']

itera = earth + iteraTopo

sunradec = itera.at(sunriset[~sunBol]).observe(sun).apparent()
moonradec = itera.at(sunriset[~sunBol]).observe(moon).apparent()

print(sunradec.radec(epoch='date'))

print(moonradec.radec(epoch='date'))

print(sunradec.altaz())

print(moonradec.altaz())

sunradec.separation_from(moonradec)

almanac.fraction_illuminated(ephemeris, 'moon', sunriset[~sunBol])[0]*100

t0 = timescale.utc(2023, 3, 21, 0)
t1 = timescale.utc(2023, 3, 22, 0)
t, y = almanac.find_discrete(t0, t1, almanac.moon_phases(ephemeris))

"""**WAKTU KONJUNGSI**"""

t[y==0].utc_iso()

"""**Fungsi**"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
from matplotlib import pyplot as plt
plt.style.use('ggplot')

longitude = 105.3115833
latitude = -5.357194444
bosschaTopo = api.Topos(longitude=longitude, latitude=latitude)
def visibilitas(date, plot=False, day=0):

    wib = timezone('Asia/Jakarta')
    date = wib.localize(date)
    t0 = timescale.utc(date + timedelta(days=day))

    t1 = timescale.utc(t0.astimezone(wib) - timedelta(days=28))
    t2 = timescale.utc(t0.astimezone(wib) + timedelta(days=28))
    t, y = almanac.find_discrete(t1, t2, almanac.moon_phases(ephemeris))

    # t0 = t[y==0]
    t1 = timescale.utc(t0.astimezone(wib) - timedelta(days=0))
    t2 = timescale.utc(t0.astimezone(wib) + timedelta(days=1))

    moonAge = sunriset[~sunBol] - t[y==0]
    moonAge = moonAge[0]*24*3600

    lagTime = (moonriset[~moonBol][0]-sunriset[~sunBol][0])*24*3600

    earth = ephemeris['earth']
    sun = ephemeris['sun']
    moon = ephemeris['moon']
    bosscha = earth + bosschaTopo

    sunradec = bosscha.at(sunriset[~sunBol]).observe(sun).apparent()
    moonradec = bosscha.at(sunriset[~sunBol]).observe(moon).apparent()

    sunra, sundec, _ = sunradec.radec(epoch='date')
    moonra, moondec, _ = moonradec.radec(epoch='date')
    sunal, sunaz, _ = sunradec.altaz()
    moonal, moonaz, _ = moonradec.altaz()

    relal = moonal.degrees[0] - sunal.degrees[0]
    relaz = moonaz.degrees[0] - sunaz.degrees[0]

    elongation = sunradec.separation_from(moonradec)
    illumination = almanac.fraction_illuminated(ephemeris, 'moon', sunriset[~sunBol])[0]*100
    print('By the Name of Allah')
    print('Ucupkiyah Calculator by Muhammad Yusuf')
    print('')

    print('G. Conjunction Time\t : {}'.format(t[y==0].astimezone(wib)[0]))
    print('Sunset Time \t \t : {}'.format(sunset))
    print('Moonset Time \t \t : {}'.format(moonset))
    print('')

    print('G. Moon Age\t \t : {:02.0f}h {:02.0f}m {:02.2f}s'.format(moonAge//3600, moonAge%3600//60, moonAge%60))
    print('Lag Time \t \t : {:02.0f}h {:02.0f}m {:02.2f}s'.format(lagTime//3600, lagTime%3600//60, lagTime%60))
    print('')

    print('Sun RA \t \t \t : {}'.format(sunra))
    print('Moon RA \t \t : {}'.format(moonra))
    print('')

    print('Sun Dec \t \t : {}'.format(sundec))
    print('Moon Dec \t \t : {}'.format(moondec))
    print('')

    print('Sun Azimuth \t \t : {}'.format(sunaz))
    print('Moon Azimuth \t \t : {}'.format(moonaz))
    print('')

    print('Sun Altitude \t \t : {}'.format(sunal))
    print('Moon Altitude \t \t : {}'.format(moonal))
    print('')

    print('Relative Altitude \t : {}'.format(Angle(degrees=relal).dstr()))
    print('Relative Azimuth \t : {}'.format(Angle(degrees=relaz).dstr()))
    print('')

    print('Moon Elongation \t : {}'.format(elongation))
    print('Moon Illumination \t : {:02.2f}%'.format(illumination))

    if plot:
        lingkaranMatahari = plt.Circle((sunaz.to(u.deg)[0].value, sunal.to(u.deg)[0].value),
                        (0.8*u.deg).value,
                        fc='yellow')
        lingkaranBulan = plt.Circle((moonaz.to(u.deg)[0].value, moonal.to(u.deg)[0].value),
                                 (0.5*u.deg).value,
                                 fc='black', alpha=.5)
        plt.figure(figsize=(12, 10))
        ax = plt.subplot(aspect=1)
        ax.add_patch(lingkaranMatahari)
        ax.add_patch(lingkaranBulan)
        if sunaz.to(u.deg)[0] <= moonaz.to(u.deg)[0]:
            xlimlow = sunaz.to(u.deg)[0].value
            xlimhigh = moonaz.to(u.deg)[0].value
        else:
            xlimlow = moonaz.to(u.deg)[0].value
            xlimhigh = sunaz.to(u.deg)[0].value
        if sunal.to(u.deg)[0] <= moonal.to(u.deg)[0]:
            ylimlow = sunal.to(u.deg)[0].value
            ylimhigh = moonal.to(u.deg)[0].value
        else:
            ylimlow = moonal.to(u.deg)[0].value
            ylimhigh = sunal.to(u.deg)[0].value
        plt.xlim(xlimlow-2, xlimhigh+2)
        plt.ylim(ylimlow-2, ylimhigh+2)
        plt.text(sunaz.to(u.deg)[0].value-0.28, sunal.to(u.deg)[0].value-0.05, 'Matahari', fontsize=8, color='black')
        plt.text(moonaz.to(u.deg)[0].value-0.2, moonal.to(u.deg)[0].value-0.05, 'Bulan', fontsize=8, color='white')
        plt.axhline(y=0)
        plt.plot([moonaz.to(u.deg)[0].value, sunaz.to(u.deg)[0].value],
                 [moonal.to(u.deg)[0].value, moonal.to(u.deg)[0].value],
                 label="$\Delta$ Azimut = 6° 45' 39.3'' ")
        plt.plot([sunaz.to(u.deg)[0].value, sunaz.to(u.deg)[0].value],
                 [moonal.to(u.deg)[0].value, sunal.to(u.deg)[0].value],
                 label="$\Delta$ Ketinggian = 7° 44' 56'' ".format(Angle(degrees=relal).dstr()))
        plt.plot([moonaz.to(u.deg)[0].value, sunaz.to(u.deg)[0].value],
                 [moonal.to(u.deg)[0].value, sunal.to(u.deg)[0].value],
                 label="Elongasi =  10° 16' 26.56'' ")
        plt.xlabel('Azimut (°)', color="k", size=12)
        plt.ylabel('Ketinggian (°)', color="k", size=12)
        plt.legend()
        plt.title('Prediksi Hilal 2023-03-22 18:02:48 WIB', size="12")

visibilitas(datetime(2023, 3, 22), True)

